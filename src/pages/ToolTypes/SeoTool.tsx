import React, { useState } from 'react';
import { tools } from '@/data/tools';
import { ToolInfoCard } from '@/components/ToolInfoCard';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from 'sonner';
import { Code, Filter, Hash } from 'lucide-react';
import { copyToClipboard } from '@/utils/randomUtils';

interface SeoToolProps {
  slug: string;
}

export default function SeoTool({ slug }: SeoToolProps) {
  const toolMeta = tools.find((t) => t.slug === slug);
  
  const [title, setTitle] = useState<string>('');
  const [description, setDescription] = useState<string>('');
  const [keywords, setKeywords] = useState<string>('');
  const [url, setUrl] = useState<string>('');
  const [author, setAuthor] = useState<string>('');
  const [metaTagsOutput, setMetaTagsOutput] = useState<string>('');
  
  const [userAgent, setUserAgent] = useState<string>('*');
  const [allowPaths, setAllowPaths] = useState<string>('/');
  const [disallowPaths, setDisallowPaths] = useState<string>('');
  const [sitemapUrl, setSitemapUrl] = useState<string>('');
  const [robotsTxtOutput, setRobotsTxtOutput] = useState<string>('');
  
  const [keywordText, setKeywordText] = useState<string>('');
  const [targetKeyword, setTargetKeyword] = useState<string>('');
  const [keywordDensityResult, setKeywordDensityResult] = useState<{
    totalWords: number;
    keywordCount: number;
    density: number;
  } | null>(null);

  // New state variables for additional tools
  const [htmlContent, setHtmlContent] = useState<string>('');
  const [schemaType, setSchemaType] = useState<string>('Article');
  const [redirectUrl, setRedirectUrl] = useState<string>('');
  const [redirectTime, setRedirectTime] = useState<string>('5');
  const [socialTitle, setSocialTitle] = useState<string>('');
  const [socialDescription, setSocialDescription] = useState<string>('');
  const [socialImage, setSocialImage] = useState<string>('');
  const [textToolOutput, setTextToolOutput] = useState<string>('');
  
  const generateMetaTags = () => {
    let metaTags = `<!-- Meta Tags Generated by SEO Tool -->\n`;
    metaTags += `<title>${title}</title>\n`;
    
    if (description) {
      metaTags += `<meta name="description" content="${description}" />\n`;
    }
    
    if (keywords) {
      metaTags += `<meta name="keywords" content="${keywords}" />\n`;
    }
    
    if (author) {
      metaTags += `<meta name="author" content="${author}" />\n`;
    }
    
    metaTags += `<meta property="og:title" content="${title}" />\n`;
    
    if (description) {
      metaTags += `<meta property="og:description" content="${description}" />\n`;
    }
    
    if (url) {
      metaTags += `<meta property="og:url" content="${url}" />\n`;
    }
    
    metaTags += `<meta name="twitter:card" content="summary_large_image" />\n`;
    metaTags += `<meta name="twitter:title" content="${title}" />\n`;
    
    if (description) {
      metaTags += `<meta name="twitter:description" content="${description}" />\n`;
    }
    
    metaTags += `<meta name="viewport" content="width=device-width, initial-scale=1.0" />\n`;
    
    setMetaTagsOutput(metaTags);
    toast.success("متا تگ‌ها با موفقیت ایجاد شدند");
  };

  const generateRobotsTxt = () => {
    let robotsTxt = `# robots.txt generated by SEO Tool\n\n`;
    robotsTxt += `User-agent: ${userAgent}\n`;
    
    if (allowPaths) {
      const paths = allowPaths.split('\n');
      paths.forEach(path => {
        if (path.trim()) {
          robotsTxt += `Allow: ${path.trim()}\n`;
        }
      });
    }
    
    if (disallowPaths) {
      const paths = disallowPaths.split('\n');
      paths.forEach(path => {
        if (path.trim()) {
          robotsTxt += `Disallow: ${path.trim()}\n`;
        }
      });
    }
    
    if (sitemapUrl) {
      robotsTxt += `\nSitemap: ${sitemapUrl}\n`;
    }
    
    setRobotsTxtOutput(robotsTxt);
    toast.success("فایل robots.txt با موفقیت ایجاد شد");
  };

  const calculateKeywordDensity = () => {
    if (!keywordText || !targetKeyword) {
      toast.error("لطفاً متن و کلمه کلیدی را وارد کنید");
      return;
    }
    
    const words = keywordText.toLowerCase().split(/\s+/).filter(word => word.length > 0);
    const totalWords = words.length;
    
    const keyword = targetKeyword.toLowerCase();
    const keywordCount = words.filter(word => word === keyword).length;
    
    const density = totalWords > 0 ? (keywordCount / totalWords) * 100 : 0;
    
    setKeywordDensityResult({
      totalWords,
      keywordCount,
      density: parseFloat(density.toFixed(2))
    });
    
    toast.success("چگالی کلمه کلیدی محاسبه شد");
  };

  const extractHeadings = () => {
    const headings: string[] = [];
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlContent, 'text/html');
    ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(tag => {
      doc.querySelectorAll(tag).forEach(heading => {
        headings.push(`${tag.toUpperCase()}: ${heading.textContent}`);
      });
    });
    const result = headings.join('\n');
    toast.success("ساختار هدینگ‌ها استخراج شد");
    return result;
  };

  const generateSocialTags = () => {
    let tags = `<!-- Social Media Tags -->\n`;
    tags += `<meta property="og:title" content="${socialTitle}" />\n`;
    tags += `<meta property="og:description" content="${socialDescription}" />\n`;
    if (socialImage) {
      tags += `<meta property="og:image" content="${socialImage}" />\n`;
    }
    tags += `<meta name="twitter:card" content="summary_large_image" />\n`;
    tags += `<meta name="twitter:title" content="${socialTitle}" />\n`;
    tags += `<meta name="twitter:description" content="${socialDescription}" />\n`;
    if (socialImage) {
      tags += `<meta name="twitter:image" content="${socialImage}" />\n`;
    }
    toast.success("تگ‌های شبکه‌های اجتماعی ایجاد شدند");
    return tags;
  };

  const generateMetaRefresh = () => {
    const tag = `<meta http-equiv="refresh" content="${redirectTime};url=${redirectUrl}" />`;
    toast.success("تگ ریدایرکت ایجاد شد");
    return tag;
  };

  const generateSchema = () => {
    const schema = {
      "@context": "https://schema.org",
      "@type": schemaType,
      "name": title,
      "description": description,
      "url": url
    };
    toast.success("کد Schema.org ایجاد شد");
    return JSON.stringify(schema, null, 2);
  };

  const checkHtmlLang = () => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlContent, 'text/html');
    const htmlTag = doc.querySelector('html');
    const lang = htmlTag?.getAttribute('lang') || '';
    let result = '';
    
    if (!lang) {
      result = "⚠️ تگ lang یافت نشد. پیشنهاد می‌شود از <html lang=\"fa\"> استفاده کنید.";
    } else {
      result = `✅ تگ lang موجود است: ${lang}`;
    }
    
    toast.success("بررسی زبان HTML انجام شد");
    return result;
  };

  const extractMetaKeywords = () => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlContent, 'text/html');
    const metaKeywords = doc.querySelector('meta[name="keywords"]');
    let result = '';
    
    if (metaKeywords) {
      result = `کلمات کلیدی یافت شده:\n${metaKeywords.getAttribute('content')}`;
    } else {
      result = "⚠️ تگ meta keywords یافت نشد.";
    }
    
    toast.success("کلمات کلیدی استخراج شدند");
    return result;
  };

  if (!toolMeta) return null;

  return (
    <div className="space-y-6">
      <ToolInfoCard
        name={toolMeta.name}
        description={toolMeta.description}
        learnMoreUrl={`https://www.google.com/search?q=${encodeURIComponent(toolMeta.name)}`}
      />
      
      {slug === 'meta-tag-generator' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Input
                placeholder="عنوان صفحه"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
              <Textarea
                placeholder="توضیحات متا"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
              <Input
                placeholder="کلمات کلیدی (با کاما جدا کنید)"
                value={keywords}
                onChange={(e) => setKeywords(e.target.value)}
              />
              <Input
                placeholder="آدرس URL"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
              />
              <Input
                placeholder="نویسنده"
                value={author}
                onChange={(e) => setAuthor(e.target.value)}
              />
              <Button 
                onClick={generateMetaTags}
                className="w-full"
              >
                <Code className="mr-2" size={18} />
                تولید متا تگ‌ها
              </Button>
            </div>
            
            {metaTagsOutput && (
              <div 
                className="p-4 bg-muted rounded-lg cursor-pointer font-mono text-sm whitespace-pre-wrap dir-ltr"
                onClick={() => copyToClipboard(metaTagsOutput)}
              >
                {metaTagsOutput}
              </div>
            )}
          </CardContent>
        </Card>
      ) : slug === 'robots-txt-generator' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Select value={userAgent} onValueChange={setUserAgent}>
                <SelectTrigger>
                  <SelectValue placeholder="User-agent" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="*">همه روبات‌ها (*)</SelectItem>
                  <SelectItem value="Googlebot">Googlebot</SelectItem>
                  <SelectItem value="Bingbot">Bingbot</SelectItem>
                  <SelectItem value="Baiduspider">Baiduspider</SelectItem>
                  <SelectItem value="YandexBot">YandexBot</SelectItem>
                </SelectContent>
              </Select>
              
              <Textarea
                placeholder="مسیرهای مجاز (هر مسیر در یک خط)"
                value={allowPaths}
                onChange={(e) => setAllowPaths(e.target.value)}
              />
              
              <Textarea
                placeholder="مسیرهای غیر مجاز (هر مسیر در یک خط)"
                value={disallowPaths}
                onChange={(e) => setDisallowPaths(e.target.value)}
              />
              
              <Input
                placeholder="آدرس نقشه سایت (Sitemap)"
                value={sitemapUrl}
                onChange={(e) => setSitemapUrl(e.target.value)}
              />
              
              <Button 
                onClick={generateRobotsTxt}
                className="w-full"
              >
                <Code className="mr-2" size={18} />
                تولید robots.txt
              </Button>
            </div>
            
            {robotsTxtOutput && (
              <div 
                className="p-4 bg-muted rounded-lg cursor-pointer font-mono text-sm whitespace-pre-wrap dir-ltr"
                onClick={() => copyToClipboard(robotsTxtOutput)}
              >
                {robotsTxtOutput}
              </div>
            )}
          </CardContent>
        </Card>
      ) : slug === 'keyword-density' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Textarea
                placeholder="متن مورد نظر را وارد کنید"
                value={keywordText}
                onChange={(e) => setKeywordText(e.target.value)}
                className="min-h-32"
              />
              
              <Input
                placeholder="کلمه کلیدی هدف"
                value={targetKeyword}
                onChange={(e) => setTargetKeyword(e.target.value)}
              />
              
              <Button 
                onClick={calculateKeywordDensity}
                className="w-full"
              >
                <Filter className="mr-2" size={18} />
                محاسبه چگالی کلمه کلیدی
              </Button>
            </div>
            
            {keywordDensityResult && (
              <div className="bg-muted rounded-lg p-4 space-y-2">
                <div className="flex justify-between">
                  <span>تعداد کل کلمات:</span>
                  <span className="font-bold">{keywordDensityResult.totalWords}</span>
                </div>
                <div className="flex justify-between">
                  <span>تعداد تکرار کلمه کلیدی:</span>
                  <span className="font-bold">{keywordDensityResult.keywordCount}</span>
                </div>
                <div className="flex justify-between">
                  <span>چگالی کلمه کلیدی:</span>
                  <span className="font-bold">{keywordDensityResult.density}%</span>
                </div>
                <div className="mt-4 text-sm text-gray-500">
                  {keywordDensityResult.density < 1 ? (
                    "چگالی کلمه کلیدی کم است. برای بهبود سئو، استفاده بیشتری از کلمه کلیدی توصیه می‌شود."
                  ) : keywordDensityResult.density > 5 ? (
                    "چگالی کلمه کلیدی زیاد است. این ممکن است به عنوان اسپم تلقی شود."
                  ) : (
                    "چگالی کلمه کلیدی در محدوده مناسب قرار دارد (بین 1% تا 5%)."
                  )}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      ) : slug === 'html-heading-extractor' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Textarea
                placeholder="کد HTML را وارد کنید..."
                value={htmlContent}
                onChange={(e) => setHtmlContent(e.target.value)}
                className="min-h-32"
              />
              <Button 
                onClick={() => {
                  const result = extractHeadings();
                  setTextToolOutput(result);
                }}
                className="w-full"
              >
                <Code className="mr-2" size={18} />
                استخراج هدینگ‌ها
              </Button>
            </div>
            {textToolOutput && (
              <div 
                className="p-4 bg-muted rounded-lg cursor-pointer font-mono text-sm whitespace-pre-wrap"
                onClick={() => copyToClipboard(textToolOutput)}
              >
                {textToolOutput}
              </div>
            )}
          </CardContent>
        </Card>
      ) : slug === 'social-tags-generator' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Input
                placeholder="عنوان"
                value={socialTitle}
                onChange={(e) => setSocialTitle(e.target.value)}
              />
              <Textarea
                placeholder="توضیحات"
                value={socialDescription}
                onChange={(e) => setSocialDescription(e.target.value)}
              />
              <Input
                placeholder="آدرس تصویر"
                value={socialImage}
                onChange={(e) => setSocialImage(e.target.value)}
              />
              <Button 
                onClick={() => {
                  const tags = generateSocialTags();
                  setTextToolOutput(tags);
                }}
                className="w-full"
              >
                <Code className="mr-2" size={18} />
                تولید تگ‌های اجتماعی
              </Button>
            </div>
            {textToolOutput && (
              <div 
                className="p-4 bg-muted rounded-lg cursor-pointer font-mono text-sm whitespace-pre-wrap"
                onClick={() => copyToClipboard(textToolOutput)}
              >
                {textToolOutput}
              </div>
            )}
          </CardContent>
        </Card>
      ) : slug === 'meta-refresh-generator' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Input
                placeholder="آدرس مقصد"
                value={redirectUrl}
                onChange={(e) => setRedirectUrl(e.target.value)}
              />
              <Input
                type="number"
                placeholder="زمان تاخیر (ثانیه)"
                value={redirectTime}
                onChange={(e) => setRedirectTime(e.target.value)}
              />
              <Button 
                onClick={() => {
                  const tag = generateMetaRefresh();
                  setTextToolOutput(tag);
                }}
                className="w-full"
              >
                <Code className="mr-2" size={18} />
                تولید تگ ریدایرکت
              </Button>
            </div>
            {textToolOutput && (
              <div 
                className="p-4 bg-muted rounded-lg cursor-pointer font-mono text-sm whitespace-pre-wrap"
                onClick={() => copyToClipboard(textToolOutput)}
              >
                {textToolOutput}
              </div>
            )}
          </CardContent>
        </Card>
      ) : slug === 'schema-generator' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Select value={schemaType} onValueChange={setSchemaType}>
                <SelectTrigger>
                  <SelectValue placeholder="نوع Schema" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Article">مقاله</SelectItem>
                  <SelectItem value="Product">محصول</SelectItem>
                  <SelectItem value="Organization">سازمان</SelectItem>
                  <SelectItem value="Person">شخص</SelectItem>
                  <SelectItem value="WebSite">وب‌سایت</SelectItem>
                </SelectContent>
              </Select>
              <Input
                placeholder="عنوان"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
              <Textarea
                placeholder="توضیحات"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
              <Input
                placeholder="آدرس URL"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
              />
              <Button 
                onClick={() => {
                  const schema = generateSchema();
                  setTextToolOutput(schema);
                }}
                className="w-full"
              >
                <Code className="mr-2" size={18} />
                تولید Schema
              </Button>
            </div>
            {textToolOutput && (
              <div 
                className="p-4 bg-muted rounded-lg cursor-pointer font-mono text-sm whitespace-pre-wrap"
                onClick={() => copyToClipboard(textToolOutput)}
              >
                {textToolOutput}
              </div>
            )}
          </CardContent>
        </Card>
      ) : slug === 'html-lang-checker' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Textarea
                placeholder="کد HTML را وارد کنید..."
                value={htmlContent}
                onChange={(e) => setHtmlContent(e.target.value)}
                className="min-h-32"
              />
              <Button 
                onClick={() => {
                  const result = checkHtmlLang();
                  setTextToolOutput(result);
                }}
                className="w-full"
              >
                <Code className="mr-2" size={18} />
                بررسی تگ lang
              </Button>
            </div>
            {textToolOutput && (
              <div 
                className="p-4 bg-muted rounded-lg cursor-pointer font-mono text-sm whitespace-pre-wrap"
                onClick={() => copyToClipboard(textToolOutput)}
              >
                {textToolOutput}
              </div>
            )}
          </CardContent>
        </Card>
      ) : slug === 'meta-keywords-extractor' ? (
        <Card>
          <CardContent className="p-6 space-y-4">
            <div className="space-y-2">
              <Textarea
                placeholder="کد HTML را وارد کنید..."
                value={htmlContent}
                onChange={(e) => setHtmlContent(e.target.value)}
                className="min-h-32"
              />
              <Button 
                onClick={() => {
                  const result = extractMetaKeywords();
                  setTextToolOutput(result);
                }}
                className="w-full"
              >
                <Code className="mr-2" size={18} />
                استخراج کلمات کلیدی
              </Button>
            </div>
            {textToolOutput && (
              <div 
                className="p-4 bg-muted rounded-lg cursor-pointer font-mono text-sm whitespace-pre-wrap"
                onClick={() => copyToClipboard(textToolOutput)}
              >
                {textToolOutput}
              </div>
            )}
          </CardContent>
        </Card>
      ) : (
        <div className="rounded-lg border p-6 shadow-sm">
          <div className="flex flex-col items-center justify-center space-y-4 text-center">
            <h3 className="text-lg font-medium">این ابزار در حال توسعه است</h3>
            <p className="text-muted-foreground">
              این ابزار به زودی راه‌اندازی خواهد شد. لطفاً بعداً مراجعه کنید.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
